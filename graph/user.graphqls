type User {
  id: ID!
  account: String!
  name: String!
  avatar: String!
}

extend type Query {
  user(id: ID!): User
}

input RegisterInput {
  account: String! @binding(constraint: "required,max=32")
  password: String! @binding(constraint: "required,max=32")
}

input LoginInput {
  account: String! @binding(constraint: "required,max=32")
  password: String! @binding(constraint: "required,max=32")
}

input LogoutInput {
  account: String! @binding(constraint: "required,max=32")
}

type RegisterPayload {
  user: User!
  token: String!
}

type LoginPayload {
  user: User!
  token: String!
}

type LogoutPayload {
  success: Boolean!
}

extend type Mutation {
  register(input: RegisterInput!): RegisterPayload!
  login(input: LoginInput!): LoginPayload!
  logout(input: LogoutInput!): LogoutPayload!
}
