package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"strconv"

	"github.com/blawhi2435/shanjuku-backend/domain"
	"github.com/blawhi2435/shanjuku-backend/graph"
	"github.com/blawhi2435/shanjuku-backend/graph/model"
	"github.com/blawhi2435/shanjuku-backend/internal/cerror"
	"github.com/blawhi2435/shanjuku-backend/internal/mapper/graphmodel"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.RegisterPayload, error) {
	var response *model.RegisterPayload

	user, err := r.AuthUsecasse.Register(ctx, &domain.User{
		Account:  input.Account,
		Password: input.Password,
	})
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	modelUser := graphmodel.MappingUserDomainToGraphqlModel(user)

	response = &model.RegisterPayload{
		User:  modelUser,
		Token: user.Token,
	}

	return response, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	var response *model.LoginPayload

	user, err := r.AuthUsecasse.Login(ctx, input.Account, input.Password)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	modelUser := graphmodel.MappingUserDomainToGraphqlModel(user)

	response = &model.LoginPayload{
		User:  modelUser,
		Token: user.Token,
	}

	return response, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, input model.LogoutInput) (*model.LogoutPayload, error) {
	var response *model.LogoutPayload = &model.LogoutPayload{}

	err := r.AuthUsecasse.Logout(ctx, input.Account)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	response = &model.LogoutPayload{
		Success: true,
	}

	return response, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	userID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, cerror.GetGQLError(ctx, err)
	}

	user, err := r.UserUsecase.QueryByID(ctx, userID)
	if err != nil {
		return nil, cerror.GetGQLError(ctx, err)
	}

	modelUser := graphmodel.MappingUserDomainToGraphqlModel(user)

	return modelUser, nil
}

// Groups is the resolver for the groups field.
func (r *userResolver) Groups(ctx context.Context, obj *model.User) ([]*model.Group, error) {
	userID, err := strconv.ParseInt(obj.ID, 10, 64)
	if err != nil {
		return nil, cerror.GetGQLError(ctx, err)
	}

	groups, err := r.GroupUsecase.QueryUserGroups(ctx, userID)
	if err != nil {
		return nil, cerror.GetGQLError(ctx, err)
	}

	modelGroups := make([]*model.Group, 0)
	for _, v := range groups {
		modelGroups = append(modelGroups, graphmodel.MappingGroupDomainToGraphqlModel(v))
	}

	return modelGroups, nil
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
