package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"strconv"

	"github.com/blawhi2435/shanjuku-backend/domain"
	"github.com/blawhi2435/shanjuku-backend/graph"
	"github.com/blawhi2435/shanjuku-backend/graph/model"
	"github.com/blawhi2435/shanjuku-backend/internal/cerror"
	"github.com/blawhi2435/shanjuku-backend/internal/ctxtool"
	"github.com/blawhi2435/shanjuku-backend/internal/mapper/graphmodel"
)

// CreateActivity is the resolver for the createActivity field.
func (r *mutationResolver) CreateActivity(ctx context.Context, input model.CreateActivityInput) (*model.CreateActivityPayload, error) {
	var response *model.CreateActivityPayload

	ctx, err := ctxtool.SetTokenToContext(ctx)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	groupID, err := strconv.ParseInt(input.GroupID, 10, 64)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}
	
	activity, err := r.ActivityUsecase.CreateActivity(ctx, &domain.Activity{
		ActivityName: input.Name,
		GroupID:      groupID,
	})

	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	modelActivity := graphmodel.MappingActivityDomainToGraphqlModel(activity)

	response = &model.CreateActivityPayload{
		Activity: modelActivity,
	}

	return response, nil
}

// EditActivity is the resolver for the editActivity field.
func (r *mutationResolver) EditActivity(ctx context.Context, input model.EditActivityInput) (*model.EditActivityPayload, error) {
	var response *model.EditActivityPayload

	ctx, err := ctxtool.SetTokenToContext(ctx)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	activityID, err := strconv.ParseInt(input.ID, 10, 64)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	activity, err := r.ActivityUsecase.UpdateActivityName(ctx, &domain.Activity{
		ID:           activityID,
		ActivityName: input.Name,
	})
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	modelActivity := graphmodel.MappingActivityDomainToGraphqlModel(activity)

	response = &model.EditActivityPayload{
		Activity: modelActivity,
	}

	return response, nil
}

// DeleteActivity is the resolver for the deleteActivity field.
func (r *mutationResolver) DeleteActivity(ctx context.Context, input *model.DeleteActivityInput) (*model.DeleteActivityPayload, error) {
	var response *model.DeleteActivityPayload

	ctx, err := ctxtool.SetTokenToContext(ctx)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	activityID, err := strconv.ParseInt(input.ID, 10, 64)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	err = r.ActivityUsecase.DeleteActivity(ctx, activityID)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	response = &model.DeleteActivityPayload{
		Success: true,
	}

	return response, nil
}

// Activity is the resolver for the activity field.
func (r *queryResolver) Activity(ctx context.Context, id string) (*model.Activity, error) {
	var response *model.Activity

	ctx, err := ctxtool.SetTokenToContext(ctx)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	activityID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	activity, err := r.ActivityUsecase.QueryByID(ctx, activityID)
	if err != nil {
		return response, cerror.GetGQLError(ctx, err)
	}

	modelActivity := graphmodel.MappingActivityDomainToGraphqlModel(activity)

	return modelActivity, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
